Git Intro 2 Activity
==================

A. Form teams
-------------


Make a repo on GitHub.

Complete the exercises below, and fill in your answers in the spaces provided below each question.
Once you have completed all the exercises and filled in this file with your answers, 
add this file to your working directory (which you will create in section G) and push it to your team repo.
This file is the deliverable for this lab, so make sure you do not forget to push it at the end!

1.  List your team members below.

    ```

	James Galante
	Sam hughes
	Scott Miller

    ```


D. Getting help
---------------

Run the following commands.

    git help
    git help -ag
    git help init

1.  What does `git help` do?

    ```
	Git help, shows everything you can do with your git. It shows a comprehensive list of commands and functions that help you configure your git. For each command it lists it gives you a description of what that function does. 
	
    ```

2.  What does `-ag` cause `git help` to do?

    ```

	-ag, causes git help to compact its list of functions, into one conpact list, with no descriptions next to the functions. However -ag seems to show every single function available while git help just shows the most important ones

    ```

G. Basic commands
-----------------

Open the terminal. Navigate to your team’s repository directory.

Create a directory inside of your team repository which will act as your submission directory for this lab.
The directory should be named according to the last names of your team members following the format below.

    <member1LastName>_<member2LastName>_Lab6

Use a plain text editor to create `names.txt` inside the directory you just created.
Put the names of your team in the file. Save and exit.

Run `git status` before and after each of these commands.

    git add names.txt
    git commit –m “Add our names.”
    git log

1.  What kind of information does `git status` report?

    ```

	Git status will tell you whether or not there is files that have not been committed or not. And if there is un-committed files. It'll tell you the location in the local git where they are. 

    ```

2.  What does `git add names.txt` do?

    ```
	git add names.txt, looks for the file "names.txt" and prepares it to be committed to your git.
	

    ```

3.  What does `git commit -m "Add our names."` do?

    ```
	git commit -m. Tells the terminal  to add the specified files to your git. The part in quotes is what will show up as the commit name. For instance it helps you keep track of what changed in this commit, for example "add 3 .c files" 


    ```

Use a plain text editor to create the following files:

-   `birthdays.txt` - Put your birthdays in this file. (you are not obligated to use real information here)

-   `movies.txt` - Put the last movie each of you watched in alphabetical order.

Run `git status` before and after each of these commands.

    git add .
    git commit		Note:  Commit will open the vim editor; write a multi-line commit
						   message, save and quit (press esc and then type :wq).
    git log

4.  What does `git add .` do? What do you think `.` means?

    ```
	git add ., adds all the files to your git that are not previously committed


    ```

5.  What does `git commit` (without -m) do?

    ```
	git commit without the -m opens up an editor to add a more comprehensive git commit message


    ```

6.  If you want to write a more detailed commit message (which is
    good practice) what command would you use?

    ```
	`git commit` (without -m)


    ```

7.  What does `git log do`?

    ```
	git log, shows all the past commits. It shows the author, date, and the commit message


    ```


H. Stage/Cache/Index
--------------------

Do the following:

-   Modify `names.txt` so that names are listed in *Last, First* format,
    one per line.

-   Modify `movies.txt` so they are in reverse alphabetical order
    by title.

-   Create a new file `foods.txt` that contains your favorite foods (one
    for each team member).

Run the following commands:

    git add names.txt
    git status

1.  Below write each file name under the state that its changes are
    currently in. Compose a definition for each state.

    **Staged**

    ```

	 names.txt
	stage means you have prepared it to be committed to your git
	
    ```

    **Unstaged**

    ```

 	movies.txt
	unstage means you have not prepared it to be committed to your git


    ```

    **Untracked**

    ```

	foods.txt
	untracked means it was never committed to your git, and you have not prepared it to be 	committed

    ```

1.  If you run `git commit` what changes will be committed (***DON’T DO IT***)?

    ```
	The changes in the "stated" files will be committed 


    ```

2.  What command do you run to stage changes?

    ```
	use "git add <file>..." to update what will be committed


    ```

3.  What command do you run to unstage changes?

    ```
	use "git reset HEAD <file>..." to unstage


    ```

Run the following commands:

    git diff
    git diff --cached

1.  What does `git diff` display?

    ```
	git diff shows the differences from the previous file and the updated version of it. It is color coded. Green for added things, red for things that are deleted. It also has a plus and minus for add and subtracted things respectively. 


    ```

2.  What does `git diff --cached` display?

    ```
	it shows the difference from the last file you updated. In our case it was names.txt

    ```

3.  Formulate a sequence of commands to unstage changes to `names.txt`,
    and stage the changes to `movies.txt`. Write them here. Execute your commands and
    confirm they worked.

    ```

	"git reset HEAD names.txt" to unstage
	"git add movies.txt" to stage

    ```

4.  Edit `movies.txt`, change any one of the movies, and save it. Then
    run `git status`. What do you observe? Explain what you think is
    going on.

    ```

	It shows movies.txt in both the unstaged and stage categories. What is going on is that you previously staged an older version of the file. But the new version is unstaged

    ```

5.  Delete `names.txt`. Then run `git status`. What do you observe?
    Explain what you think is going on.

    ```

	under not staged for commit it shows "deleted: names.txt." it Is aware that names.txt is no longer in the git.

    ```

6.  Rename `movies.txt` to `last-movies`. Run `git status`. Observe
    and explain.

    ```
	under untracked files it shows "last-movies.txt" because it thinks it is a brand new file. Under not staged for commit it shows movies.txt as deleted, even though it was just a name change. 


    ```

7.  Formulate a sequence of commands to stage all changes including the
    untracked file and commit (with any reasonable message you like).
    Execute them.

    ```

	git add .
	git commit -m "4th commit"
	git push
	

    ```

8.  In git vernacular, `index`, `cache`, and `stage` all refer to the
    same thing. What does it hold?

    ```

	It holds the files in your local git that are ready to be committed and pushed

    ```

9.  Why have a `stage`? Why not just commit all changes since the last
    commit?

    ```
	Incase you are offline, the "stage" will save your progress, until you are ready to push when you are back online.


    ```

I. Undo
-------

Run the following commands:

    git log
    git status
    git reset --soft "HEAD^"
    git log
    git status

1.  What does `git reset --soft ``"HEAD^" `do?

    ```

	This line, takes us back to the previous commit, before we pushed

    ```

Run the following commands:

    git commit –m "Redo."
    git log
    git status
    git reset --hard "HEAD^"
    git log
    git status

1.  What does `git reset --hard ``"HEAD^"`` `do?

    ```

	Hard HEAD undoes the last commit and changes the files on your local repo

    ```

2.  What is the difference between `--hard` and `--soft`?

    ```
	The --hard parameter will blow out everything – it resets HEAD back to another commit, resets the index to match it, and resets the working copy to match it as well. The --soft parameter tells Git to reset HEAD to another commit, and the index and working copy don’t get touched, so all of the files that changed between the original HEAD and the commit you reset to appear to be staged.


    ```

3.  What do you think `HEAD` means?

    ```
	HEAD is the branch that you are currently pointing to. 

    ```

4.  What do you think `HEAD^` means?

    ```
	HEAD^ means the first parent of the tip of the current branch.
    ```

5.  On Canvas, put two things: 1) a link to your repo (as a comment on the assignment), and 2) submit this document.

6. Push this document, completed, to your repo.

J. Helpful resources
--------------------

-   <https://git-scm.com/doc>

-   <https://www.atlassian.com/git/tutorials/>

-   github-git-cheat-sheet.pdf on class website

K. Copyright and Licensing
--------------------------

Adapted from:

Copyright 2016, Darci Burdge and Stoney Jackson SOME RIGHTS RESERVED

This work is licensed under the Creative Commons Attribution-ShareAlike
4.0 International License. To view a copy of this license, visit
<http://creativecommons.org/licenses/by-sa/4.0/> .
